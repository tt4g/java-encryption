package com.github.tt4g.encryption.example;

import java.nio.charset.StandardCharsets;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import com.github.tt4g.encryption.encrypt.AesCbcEncryptor;
import com.github.tt4g.encryption.encrypt.IvGenerator;
import com.github.tt4g.encryption.pem.PemKeyDecoder;
import com.github.tt4g.encryption.pem.SimplePemKeyDecoder;

public class App {

    public static void main(String[] args) {
        AesStringEncryptor aesStringEncryptor = createAesStringEncryptor();

        String plain = "こんにちわ世界！";
        System.out.println("plain: " + plain);

        EncryptedString encryptedString = aesStringEncryptor.encrypt(plain);
        System.out.println("encryptedString: " + encryptedString.getEncodedString());

        String decrypted = aesStringEncryptor.decrypt(encryptedString.getEncodedString());
        System.out.println("decrypted: " + decrypted);
    }

    private static AesStringEncryptor createAesStringEncryptor() {
        AesCbcEncryptor aesCbcEncryptor = new AesCbcEncryptor(aes256Key());
        IvGenerator ivGenerator = new IvGenerator();

        return new AesStringEncryptor(aesCbcEncryptor, ivGenerator);
    }

    private static SecretKey aes256Key() {
        // Private Key which has length 256bit (32 bytes).
        // Generated by `openssl rand -base64 32`.
        String key = "V0TEUEm2njyQL9VQIp/T9PkBPo3xp3+o/uvClNnW2Nw=";
        // PEM style.
        String pemKey =
            "-----BEGIN PRIVATE KEY-----\n" +
            key +
            "\n-----END PRIVATE KEY-----";

        PemKeyDecoder pemKeyDecoder = new SimplePemKeyDecoder();
        byte[] keyBytes = pemKeyDecoder.decode(pemKey.getBytes(StandardCharsets.UTF_8));

        return new SecretKeySpec(keyBytes, "AES");
    }

}
